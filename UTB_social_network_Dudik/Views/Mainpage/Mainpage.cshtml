@model MainPageViewModel

@{
    ViewData["Title"] = "Main Page";
}

<header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">UTB Chatter</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link active" asp-controller="Home" asp-action="MainPage">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" asp-controller="Home" asp-action="Contacts">Contacts</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" asp-controller="Home" asp-action="Admin">Admin</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" asp-controller="Home" asp-action="Profile">Profile</a>
                    </li>
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link text-white" asp-controller="Account" asp-action="Logout">Logout</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
</header>

<div class="container-fluid chat-container mt-4">
    <div class="row">
        <div class="col-2">
            <div class="chat-sidebar">
                <div class="chats-title">Chats</div>
                <input type="text" id="searchInput" placeholder="Search a conversation..." class="form-control mb-3" onkeyup="filterChats()" />

                <div id="chatTabs">
                    @foreach (var chat in Model.Chats)
                    {
                        <div class="chat-tab" onclick="activateTab(this, @chat.ChatId)">
                            <span class="chat-name">@chat.ChatName</span>
                            <span class="message-icon-list">
                                <img src="https://i.imgur.com/F8pNkMa.png" alt="message-icon" class="chat-icon">
                            </span>
                        </div>
                    }
                </div>

                <button id="newConversationBtn" class="btn btn-primary mt-4">New Conversation</button>
            </div>
        </div>

        <div class="col-10">
            <div class="chat-content">
                <div class="chat-default-message">No chat selected</div>
                <div class="chat-details">
                    <div class="chat-header">
                        <span class="chat-name"></span>
                        <span class="message-icon">
                            <img src="https://i.imgur.com/fSuzzAU.png" alt="message-icon">
                        </span>
                    </div>
                    <div class="chat-status">Status: <span class="status connected">Connected</span></div>
                    <div class="chat-window">
                        <div class="messages-wrapper"></div>
                    </div>
                    <div class="chat-input">
                        <input type="text" placeholder="Enter a message..." class="form-control message-input" />
                        <button class="send-message-btn">➤</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>

    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        let currentChatId = null;
        const currentUser = "@User.Identity.Name".trim();
        const defaultProfilePic = "/images/default.png";

        connection.start()
            .then(() => console.log("✅ SignalR Connected"))
            .catch(err => console.error("❌ SignalR Connection Error:", err));

        document.addEventListener("DOMContentLoaded", function () {
            console.log("📌 DOM Loaded - Attaching Event Listeners");

            document.querySelectorAll(".chat-tab").forEach(tab => {
                tab.addEventListener("click", function () {
                    const chatId = this.getAttribute("onclick").match(/\d+/)?.[0];
                    if (chatId) {
                        activateTab(parseInt(chatId, 10), this);
                    } else {
                        console.error("❌ Failed to extract chat ID");
                    }
                });
            });

            document.querySelector('.send-message-btn').addEventListener('click', sendMessage);
            document.querySelector('.message-input').addEventListener('keydown', function (e) {
                if (e.key === 'Enter') sendMessage();
            });
        });

        function activateTab(chatId, tabElement) {
            if (!chatId) {
                console.error("❌ Chat ID is undefined");
                return;
            }

            console.log(`🔄 Activating chat ID: ${chatId}`);

            const chatName = tabElement.querySelector('.chat-name')?.textContent.trim() || "Unknown Chat";
            const chatContent = document.querySelector('.chat-content');

            chatContent.querySelector('.chat-name').textContent = chatName;
            chatContent.querySelector('.chat-default-message').style.display = 'none';
            chatContent.querySelector('.chat-details').style.display = 'block';

            currentChatId = chatId;
            chatContent.setAttribute('data-chat-id', chatId);

            console.log(`📢 Requesting chat history for chat: ${chatId}`);

            connection.invoke("JoinChat", chatId)
                .then(() => console.log(`✅ Joined chat: ${chatId}`))
                .catch(err => console.error("❌ Error joining chat:", err));
        }

        function sendMessage() {
            const messageInput = document.querySelector('.message-input');
            const message = messageInput.value.trim();

            if (!message || !currentChatId) {
                console.warn("❌ No chat selected or message empty.");
                return;
            }

            console.log(`📨 Attempting to send message: "${message}" to Chat ID: ${currentChatId}`);

            if (connection.state !== signalR.HubConnectionState.Connected) {
                console.error("❌ SignalR connection is not active, message not sent.");
                return;
            }

            connection.invoke("SendMessage", currentChatId, currentUser, message)
                .then(() => {
                    console.log(`✅ Successfully sent message: "${message}"`);
                    messageInput.value = ''; // Clear input field
                })
                .catch(err => {
                    console.error("❌ Send message error:", err);
                });
        }


        connection.on("ReceiveMessage", (chatId, sender, message, profilePicture) => {
            console.log(`📥 New message received - Chat ID: ${chatId}, Sender: ${sender}, Message: ${message}`);

            if (chatId !== currentChatId) {
                console.warn(`⚠ Message received for a different chat (Current: ${currentChatId}, Received: ${chatId})`);
                return;
            }

            saveProfileToStorage(sender, profilePicture);
            addMessageToChat(sender, message, profilePicture);
        });

        function saveProfileToStorage(user, profilePic) {
            if (!user || !profilePic) return;
            console.log(`💾 Saving profile for ${user}: ${profilePic}`);
            localStorage.setItem(`profile_${user.toLowerCase()}`, profilePic);
        }

        function getProfileFromStorage(user) {
            const storedPic = localStorage.getItem(`profile_${user.toLowerCase()}`);
            if (!storedPic) {
                console.warn(`⚠ No profile picture found for ${user}, using default.`);
            }
            return storedPic || defaultProfilePic;
        }

        connection.on("LoadChatHistory", (chatId, messages) => {
            console.log("✅ Chat history received:", messages);

            if (chatId !== currentChatId) return;

            const messagesWrapper = document.querySelector('.messages-wrapper');
            messagesWrapper.innerHTML = ''; // Clear previous messages

            messages.forEach(msg => {
                console.log(`📩 Rendering message:`, msg);
                addMessageToChat(msg.sender, msg.content, getProfileFromStorage(msg.sender));
            });

            messagesWrapper.scrollTop = messagesWrapper.scrollHeight;
        });

        function addMessageToChat(sender, message, profilePicture) {
            const messagesWrapper = document.querySelector('.messages-wrapper');

            if (!profilePicture) {
                profilePicture = "/images/default.png"; // Fallback if missing
            }

            const messageElem = document.createElement('div');
            const isCurrentUser = sender.trim().toLowerCase() === currentUser.trim().toLowerCase();

            messageElem.classList.add('chat-message', isCurrentUser ? 'my-message' : 'other-message');

            messageElem.innerHTML = `
                <div class="message-container">
                    <img class="profile-pic" src="${profilePicture}" alt="${sender}" onerror="this.onerror=null;this.src='/images/default.png';" />
                    <div class="message-content">
                        <div class="message-sender">${sender}</div>
                        <div class="message-text">${message}</div>
                    </div>
                </div>
            `;

            messagesWrapper.appendChild(messageElem);
            messagesWrapper.scrollTop = messagesWrapper.scrollHeight;
        }
    </script>
}





@section Styles {
    <link rel="stylesheet" href="~/css/Mainpage.css" asp-append-version="true" />
}
